---
- name: Set hostname
  hostname:
    name: "{{ inventory_hostname }}"
  become: true

- name: Add hosts to /etc/hosts
  lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item]['ansible_host'] }} {{ item }}"
    state: present
  loop: "{{ groups['freeipa'] }}"

- name: Copy FreeIPA repository template
  template:
    src: freeipa.repo.j2
    dest: /etc/yum.repos.d/freeipa.repo
  become: true

- name: Install IPA replica packages
  yum:
    name:
      - expect
      - pexpect
      - ipa-server
      - ipa-server-dns
      - freeipa-healthcheck
    state: present
  become: yes
  when: ansible_os_family == "RedHat"

- name: Check if FreeIPA client is already installed
  stat:
    path: /etc/ipa/default.conf
  register: ipa_client_install_check


- name: Install IPA client
  shell: |
    expect -c '
    spawn ipa-client-install --mkhomedir --domain={{ domain }} --realm={{ realm }} --server={{ groups["ipa_servers"][0] }} --principal=admin --password={{ admin_password }} --unattended
    expect "Proceed with fixed values and no DNS discovery? \[no\]:"
    send "yes\r"
    expect "Continue to configure the system with these values? \[no\]:"
    send "yes\r"
    expect "User authorized to enroll computers:"
    send "admin\r"
    expect "Password for admin@{{ realm }}:"
    send "{{ admin_password }}\r"
    expect eof
    '
  become: yes
  when:
    - ansible_os_family == "RedHat"
    - not ipa_client_install_check.stat.exists

- name: Check if FreeIPA replica is already installed
  stat:
    path: /var/lib/ipa/sysrestore/sysrestore.state
  register: ipa_replica_install_check

- name: Calculate reverse zone
  set_fact:
    reverse_zone: "{{ '.'.join(ansible_default_ipv4.address.split('.')[-2::-1]) }}.in-addr.arpa."

- name: Obtain Kerberos ticket for admin
  command: kinit admin
  become: yes
  args:
    stdin: "{{ admin_password }}"
  when:
    - ansible_os_family == "RedHat"
    - not ipa_replica_install_check.stat.exists

- name: Check if A record exists for the replica
  command: ipa dnsrecord-show {{ domain }} {{ inventory_hostname.split('.')[0] }}
  register: dns_a_record_check
  failed_when: false
  become: yes
  when:
    - ansible_os_family == "RedHat"
    - inventory_hostname in groups['ipa_replicas']
    - not ipa_replica_install_check.stat.exists

- name: Ensure DNS A record is added for the replica
  command: ipa dnsrecord-add {{ domain }} {{ inventory_hostname.split('.')[0] }} --a-rec={{ hostvars[inventory_hostname]['ansible_host'] }}
  become: yes
  when:
    - ansible_os_family == "RedHat"
    - inventory_hostname in groups['ipa_replicas']
    - not ipa_replica_install_check.stat.exists
    - dns_a_record_check.rc != 0

- name: Check if PTR record exists for the replica
  command: ipa dnsrecord-show {{ reverse_zone }} {{ hostvars[inventory_hostname]['ansible_host'].split('.')[3] }}
  register: dns_ptr_record_check
  failed_when: false
  become: yes
  when:
    - ansible_os_family == "RedHat"
    - inventory_hostname in groups['ipa_replicas']
    - not ipa_replica_install_check.stat.exists

- name: Ensure PTR record is added for the replica
  command: ipa dnsrecord-add {{ reverse_zone }} {{ hostvars[inventory_hostname]['ansible_host'].split('.')[3] }} --ptr-rec={{ inventory_hostname }}.
  become: yes
  when:
    - ansible_os_family == "RedHat"
    - inventory_hostname in groups['ipa_replicas']
    - not ipa_replica_install_check.stat.exists
    - dns_ptr_record_check.rc != 0



- name: Copy ipa-replica-install expect script
  template:
    src: ipa_replica_install.expect.j2
    dest: /tmp/ipa_replica_install.expect
    mode: '0755'
  when:
    - ansible_os_family == "RedHat"
    - not ipa_replica_install_check.stat.exists

- name: Run ipa-replica-install with expect script
  command: /tmp/ipa_replica_install.expect
  become: yes
  register: replica_install_output
  when:
    - ansible_os_family == "RedHat"
    - not ipa_replica_install_check.stat.exists

- name: Debug replica install output
  debug:
    var: replica_install_output
  when:
    - ansible_os_family == "RedHat"
    - not ipa_replica_install_check.stat.exists

- name: Check if ipa-replica-install was successful
  stat:
    path: /var/lib/ipa/sysrestore/sysrestore.state
  register: ipa_replica_install_check_post




